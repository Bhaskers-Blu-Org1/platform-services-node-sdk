/**
 * (C) Copyright IBM Corp. 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as extend from 'extend';
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { Authenticator, BaseService, getAuthenticatorFromEnvironment, getMissingParams, UserOptions } from 'ibm-cloud-sdk-core';
import { getSdkHeaders } from '../lib/common';

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 */

class CaseManagementV1 extends BaseService {

  static DEFAULT_SERVICE_URL: string = 'https://support-center.cloud.ibm.com/';
  static DEFAULT_SERVICE_NAME: string = 'case_management';

  /*************************
   * Factory method
   ************************/

  /**
   * Constructs an instance of CaseManagementV1 with passed in options and external configuration.
   *
   * @param {UserOptions} [options] - The parameters to send to the service.
   * @param {string} [options.serviceName] - The name of the service to configure
   * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
   * @param {string} [options.serviceUrl] - The URL for the service
   * @returns {CaseManagementV1}
   */

  public static newInstance(options: UserOptions): CaseManagementV1 {
    options = options || {};

    if (!options.serviceName) {
      options.serviceName = this.DEFAULT_SERVICE_NAME;
    }
    if (!options.authenticator) {
      options.authenticator = getAuthenticatorFromEnvironment(options.serviceName);
    }
    const service = new CaseManagementV1(options);
    service.configureService(options.serviceName);
    if (options.serviceUrl) {
      service.setServiceUrl(options.serviceUrl);
    }
    return service;
  }


  /**
   * Construct a CaseManagementV1 object.
   *
   * @param {Object} options - Options for the service.
   * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://gateway.watsonplatform.net'). The base url may differ between IBM Cloud regions.
   * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
   * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
   * @constructor
   * @returns {CaseManagementV1}
   */
  constructor(options: UserOptions) {
    options = options || {};

    super(options);
    if (options.serviceUrl) {
      this.setServiceUrl(options.serviceUrl);
    } else {
      this.setServiceUrl(CaseManagementV1.DEFAULT_SERVICE_URL);
    }
  }

  /*************************
   * caseManagement
   ************************/

  /**
   * Get cases in account.
   *
   * Get cases in the account which is specified by the content of the IAM token.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {number} [params.offset] - Number of cases should be skipped.
   * @param {number} [params.limit] - Number of cases should be returned.
   * @param {string} [params.search] - String that a case might contain.
   * @param {string} [params.sort] - Sort field and direction. If omitted, default to descending of updated date. Prefix
   * "~" signifies sort in descending.
   * @param {string[]} [params.status] - Case status filter.
   * @param {string[]} [params.fields] - Selected fields of interest instead of the entire case information.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.CaseCollection>>}
   */
  public getCases(params?: CaseManagementV1.GetCasesParams): Promise<CaseManagementV1.Response<CaseManagementV1.CaseCollection>> {
    const _params = extend({}, params);

    return new Promise((resolve, reject) => {
      const query = {
        'offset': _params.offset,
        'limit': _params.limit,
        'search': _params.search,
        'sort': _params.sort,
        'status': _params.status,
        'fields': _params.fields
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getCases');

      const parameters = {
        options: {
          url: '/case-management/v1/cases',
          method: 'GET',
          qs: query,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Create a case.
   *
   * Create a case in the account.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {string} [params.type] - the case type.
   * @param {string} [params.subject] - Subject of the case.
   * @param {string} [params.description] - Detailed description of the issue.
   * @param {number} [params.severity] - the severity associated with the case (1 - 4).
   * @param {EuPayload} [params.eu] - Specify if the case should be treated as EU regulated. Only one of the following
   * properties is required. Call EU support utility endpoint to determine which property must be specified for your
   * account.
   * @param {OfferingPayload} [params.offering] - The offering of a case to be created.
   * @param {Resource[]} [params.resources] - List of resources to attach to case. If attaching Classic IaaS devices use
   * type and id fields if Cloud Resource Name (CRN) is unavialable. Otherwise pass the resource CRN. The resource list
   * must be consistent with the value selected for the resource offering.
   * @param {User[]} [params.watchlist] - User IDs in the watchlist.
   * @param {string} [params.invoiceNumber] - Invoice number of "Billing and Invoice" case type.
   * @param {boolean} [params.slaCreditRequest] - Flag to indicate if case is for an Service Level Agreement (SLA)
   * credit request.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Case>>}
   */
  public createCase(params?: CaseManagementV1.CreateCaseParams): Promise<CaseManagementV1.Response<CaseManagementV1.Case>> {
    const _params = extend({}, params);

    return new Promise((resolve, reject) => {
      const body = {
        'type': _params.type,
        'subject': _params.subject,
        'description': _params.description,
        'severity': _params.severity,
        'eu': _params.eu,
        'offering': _params.offering,
        'resources': _params.resources,
        'watchlist': _params.watchlist,
        'invoice_number': _params.invoiceNumber,
        'sla_credit_request': _params.slaCreditRequest
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createCase');

      const parameters = {
        options: {
          url: '/case-management/v1/cases',
          method: 'POST',
          body,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Get a case in account.
   *
   * Get a case in the account that is specified by the case number.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.caseNumber - Unique identifier of a case.
   * @param {string[]} [params.fields] - Selected fields of interest instead of the entire case information.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Case>>}
   */
  public getCase(params: CaseManagementV1.GetCaseParams): Promise<CaseManagementV1.Response<CaseManagementV1.Case>> {
    const _params = extend({}, params);
    const requiredParams = ['caseNumber'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'fields': _params.fields
      };

      const path = {
        'case_number': _params.caseNumber
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getCase');

      const parameters = {
        options: {
          url: '/case-management/v1/cases/{case_number}',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Update case status.
   *
   * Mark the case as resolved or unresolved, or accept the provided resolution.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.caseNumber - Unique identifier of a case.
   * @param {string} params.action - the action to perform on the case.
   * @param {string} [params.comment] - a comment to be associated with the updated status.
   * @param {number} [params.resolutionCode] - * 1: Client error
   * * 2: Defect found with Component/Service
   * * 3: Documentation Error
   * * 4: Sollution found in forums
   * * 5: Solution found in public Documentation
   * * 6: Solution no longer required
   * * 7: Solution provided by IBM outside of support case
   * * 8: Solution provided by IBM support engineer.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Case>>}
   */
  public updateCaseStatus(params: CaseManagementV1.UpdateCaseStatusParams): Promise<CaseManagementV1.Response<CaseManagementV1.Case>> {
    const _params = extend({}, params);
    const requiredParams = ['caseNumber', 'action'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'action': _params.action,
        'comment': _params.comment,
        'resolution_code': _params.resolutionCode
      };

      const path = {
        'case_number': _params.caseNumber
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'updateCaseStatus');

      const parameters = {
        options: {
          url: '/case-management/v1/cases/{case_number}/status',
          method: 'PUT',
          body,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Add comment to case.
   *
   * Add a comment to a case.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.caseNumber - Unique identifier of a case.
   * @param {string} params.comment - the comment to be added to the case.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Comment>>}
   */
  public addComment(params: CaseManagementV1.AddCommentParams): Promise<CaseManagementV1.Response<CaseManagementV1.Comment>> {
    const _params = extend({}, params);
    const requiredParams = ['caseNumber', 'comment'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'comment': _params.comment
      };

      const path = {
        'case_number': _params.caseNumber
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'addComment');

      const parameters = {
        options: {
          url: '/case-management/v1/cases/{case_number}/comments',
          method: 'PUT',
          body,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Add users to watchlist of case.
   *
   * Add users to the watchlist of case. By adding a user to the watchlist of the case, you are granting them read and
   * write permissions, so the user can view the case, receive updates, and make updates to the case. Note that the user
   * must be in the account to be added to the watchlist.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.caseNumber - Unique identifier of a case.
   * @param {UserIdAndRealm[]} [params.watchlist] - List of users to be added or removed from the watchlist of a case.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.AddWatchlistResults>>}
   */
  public addWatchlist(params: CaseManagementV1.AddWatchlistParams): Promise<CaseManagementV1.Response<CaseManagementV1.AddWatchlistResults>> {
    const _params = extend({}, params);
    const requiredParams = ['caseNumber'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'watchlist': _params.watchlist
      };

      const path = {
        'case_number': _params.caseNumber
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'addWatchlist');

      const parameters = {
        options: {
          url: '/case-management/v1/cases/{case_number}/watchlist',
          method: 'PUT',
          body,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Remove users from watchlist of case.
   *
   * Remove users from the watchlist of a case.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.caseNumber - Unique identifier of a case.
   * @param {UserIdAndRealm[]} [params.watchlist] - List of users to be added or removed from the watchlist of a case.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.User[]>>}
   */
  public removeWatchlist(params: CaseManagementV1.RemoveWatchlistParams): Promise<CaseManagementV1.Response<CaseManagementV1.User[]>> {
    const _params = extend({}, params);
    const requiredParams = ['caseNumber'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'watchlist': _params.watchlist
      };

      const path = {
        'case_number': _params.caseNumber
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'removeWatchlist');

      const parameters = {
        options: {
          url: '/case-management/v1/cases/{case_number}/watchlist',
          method: 'DELETE',
          body,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Add a resource to case.
   *
   * Add a resource to case by specifying the Cloud Resource Name (CRN), or id and type if attaching a class iaaS
   * resource.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.caseNumber - Unique identifier of a case.
   * @param {string} [params.crn] - Cloud Resource Name of the resource.
   * @param {string} [params.name] - Name of the resource.
   * @param {string} [params.type] - Only used to attach Classic IaaS devices which have no CRN.
   * @param {number} [params.id] - Only used to attach Classic IaaS devices which have no CRN. Id of Classic IaaS
   * device.
   * @param {string} [params.note] - A note about this resource.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Resource>>}
   */
  public addResource(params: CaseManagementV1.AddResourceParams): Promise<CaseManagementV1.Response<CaseManagementV1.Resource>> {
    const _params = extend({}, params);
    const requiredParams = ['caseNumber'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'crn': _params.crn,
        'name': _params.name,
        'type': _params.type,
        'id': _params.id,
        'note': _params.note
      };

      const path = {
        'case_number': _params.caseNumber
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'addResource');

      const parameters = {
        options: {
          url: '/case-management/v1/cases/{case_number}/resources',
          method: 'PUT',
          body,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Add attachment(s) to case.
   *
   * You can add attachments to a case to provide more information for the support team about the issue that you're
   * experiencing.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.caseNumber - Unique identifier of a case.
   * @param {NodeJS.ReadableStream|Buffer} params.file - file of supported types, 8MB in size limit.
   * @param {string} [params.fileContentType] - The content type of file.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Attachment>>}
   */
  public uploadFile(params: CaseManagementV1.UploadFileParams): Promise<CaseManagementV1.Response<CaseManagementV1.Attachment>> {
    const _params = extend({}, params);
    const requiredParams = ['caseNumber', 'file'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const formData = {
        'file': {
          data: _params.file,
          contentType: _params.fileContentType
        }
      };

      const path = {
        'case_number': _params.caseNumber
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'uploadFile');

      const parameters = {
        options: {
          url: '/case-management/v1/cases/{case_number}/attachments',
          method: 'PUT',
          path,
          formData
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'multipart/form-data',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Download an attachment.
   *
   * Download an attachment from a case.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.caseNumber - Unique identifier of a case.
   * @param {string} params.fileId - Unique identifier of a file.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<NodeJS.ReadableStream|Buffer>>}
   */
  public downloadFile(params: CaseManagementV1.DownloadFileParams): Promise<CaseManagementV1.Response<NodeJS.ReadableStream|Buffer>> {
    const _params = extend({}, params);
    const requiredParams = ['caseNumber', 'fileId'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const path = {
        'case_number': _params.caseNumber,
        'file_id': _params.fileId
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'downloadFile');

      const parameters = {
        options: {
          url: '/case-management/v1/cases/{case_number}/attachments/{file_id}',
          method: 'GET',
          path,
          responseType: 'stream',
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/octet-stream',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Remove attachment from case.
   *
   * Remove an attachment from a case.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.caseNumber - Unique identifier of a case.
   * @param {string} params.fileId - Unique identifier of a file.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.DeleteFileResponse>>}
   */
  public deleteFile(params: CaseManagementV1.DeleteFileParams): Promise<CaseManagementV1.Response<CaseManagementV1.DeleteFileResponse>> {
    const _params = extend({}, params);
    const requiredParams = ['caseNumber', 'fileId'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const path = {
        'case_number': _params.caseNumber,
        'file_id': _params.fileId
      };

      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteFile');

      const parameters = {
        options: {
          url: '/case-management/v1/cases/{case_number}/attachments/{file_id}',
          method: 'DELETE',
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /*************************
   * utilities
   ************************/

  /**
   * Shows how to mark case as EU supported.
   *
   * Shows how an account can mark a case as EU supported.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.EuSupport>>}
   */
  public getEuSupport(params?: CaseManagementV1.GetEuSupportParams): Promise<CaseManagementV1.Response<CaseManagementV1.EuSupport>> {
    const _params = extend({}, params);

    return new Promise((resolve, reject) => {
      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getEuSupport');

      const parameters = {
        options: {
          url: '/case-management/utilities/v1/eu-support',
          method: 'GET',
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Get offerings.
   *
   * Get offerings used in technical cases.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.TechnicalOfferingsResponse>>}
   */
  public getTechnicalOfferings(params?: CaseManagementV1.GetTechnicalOfferingsParams): Promise<CaseManagementV1.Response<CaseManagementV1.TechnicalOfferingsResponse>> {
    const _params = extend({}, params);

    return new Promise((resolve, reject) => {
      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getTechnicalOfferings');

      const parameters = {
        options: {
          url: '/case-management/utilities/v1/offerings/technical',
          method: 'GET',
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Get resolution code values.
   *
   * Get the resolution code values used in "Update Status API".
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.ResolutionCodesResponse>>}
   */
  public getResolutionCodes(params?: CaseManagementV1.GetResolutionCodesParams): Promise<CaseManagementV1.Response<CaseManagementV1.ResolutionCodesResponse>> {
    const _params = extend({}, params);

    return new Promise((resolve, reject) => {
      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getResolutionCodes');

      const parameters = {
        options: {
          url: '/case-management/utilities/v1/constants/resolution-codes',
          method: 'GET',
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Get status values.
   *
   * Get the status values used in case filtering.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.StatusesResponse>>}
   */
  public getStatuses(params?: CaseManagementV1.GetStatusesParams): Promise<CaseManagementV1.Response<CaseManagementV1.StatusesResponse>> {
    const _params = extend({}, params);

    return new Promise((resolve, reject) => {
      const sdkHeaders = getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getStatuses');

      const parameters = {
        options: {
          url: '/case-management/utilities/v1/constants/statuses',
          method: 'GET',
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

}

/*************************
 * interfaces
 ************************/

namespace CaseManagementV1 {

  /** An operation response. */
  export interface Response<T = any>  {
    result: T;
    status: number;
    statusText: string;
    headers: IncomingHttpHeaders;
  }

  /** The callback for a service request. */
  export type Callback<T> = (error: any, response?: Response<T>) => void;

  /** The body of a service request that returns no response data. */
  export interface Empty { }

  /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
  export interface JsonObject {
    [key: string]: any;
  }

  /*************************
   * request interfaces
   ************************/

  /** Parameters for the `getCases` operation. */
  export interface GetCasesParams {
    /** Number of cases should be skipped. */
    offset?: number;
    /** Number of cases should be returned. */
    limit?: number;
    /** String that a case might contain. */
    search?: string;
    /** Sort field and direction. If omitted, default to descending of updated date. Prefix "~" signifies sort in
     *  descending.
     */
    sort?: string;
    /** Case status filter. */
    status?: GetCasesConstants.Status[] | string[];
    /** Selected fields of interest instead of the entire case information. */
    fields?: GetCasesConstants.Fields[] | string[];
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `getCases` operation. */
  export namespace GetCasesConstants {
    /** Case status filter. */
    export enum Status {
      NEW = 'new',
      IN_PROGRESS = 'in_progress',
      WAITING_ON_CLIENT = 'waiting_on_client',
      RESOLUTION_PROVIDED = 'resolution_provided',
      RESOLVED = 'resolved',
      CLOSED = 'closed',
    }
    /** Selected fields of interest instead of the entire case information. */
    export enum Fields {
      NUMBER = 'number',
      SHORT_DESCRIPTION = 'short_description',
      DESCRIPTION = 'description',
      CREATED_AT = 'created_at',
      CREATED_BY = 'created_by',
      UPDATED_AT = 'updated_at',
      UPDATED_BY = 'updated_by',
      CONTACT = 'contact',
      CONTACT_TYPE = 'contact_type',
      STATUS = 'status',
      SEVERITY = 'severity',
      SUPPORT_TIER = 'support_tier',
      RESOLUTION = 'resolution',
      CLOSE_NOTES = 'close_notes',
      INVOICE_NUMBER = 'invoice_number',
      EU = 'eu',
      WATCHLIST = 'watchlist',
      ATTACHMENTS = 'attachments',
      RESOURCES = 'resources',
      COMMENTS = 'comments',
      OFFERING = 'offering',
    }
  }

  /** Parameters for the `createCase` operation. */
  export interface CreateCaseParams {
    /** the case type. */
    type?: CreateCaseConstants.Type | string;
    /** Subject of the case. */
    subject?: string;
    /** Detailed description of the issue. */
    description?: string;
    /** the severity associated with the case (1 - 4). */
    severity?: number;
    /** Specify if the case should be treated as EU regulated. Only one of the following properties is required.
     *  Call EU support utility endpoint to determine which property must be specified for your account.
     */
    eu?: EuPayload;
    /** The offering of a case to be created. */
    offering?: OfferingPayload;
    /** List of resources to attach to case. If attaching Classic IaaS devices use type and id fields if Cloud
     *  Resource Name (CRN) is unavialable. Otherwise pass the resource CRN. The resource list must be consistent with
     *  the value selected for the resource offering.
     */
    resources?: Resource[];
    /** User IDs in the watchlist. */
    watchlist?: User[];
    /** Invoice number of "Billing and Invoice" case type. */
    invoiceNumber?: string;
    /** Flag to indicate if case is for an Service Level Agreement (SLA) credit request. */
    slaCreditRequest?: boolean;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createCase` operation. */
  export namespace CreateCaseConstants {
    /** the case type. */
    export enum Type {
      TECHNICAL = 'technical',
      ACCOUNT_AND_ACCESS = 'account_and_access',
      BILLING_AND_INVOICE = 'billing_and_invoice',
      SALES = 'sales',
    }
  }

  /** Parameters for the `getCase` operation. */
  export interface GetCaseParams {
    /** Unique identifier of a case. */
    caseNumber: string;
    /** Selected fields of interest instead of the entire case information. */
    fields?: string[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateCaseStatus` operation. */
  export interface UpdateCaseStatusParams {
    /** Unique identifier of a case. */
    caseNumber: string;
    /** the action to perform on the case. */
    action: UpdateCaseStatusConstants.Action | string;
    /** a comment to be associated with the updated status. */
    comment?: string;
    /** * 1: Client error
     *  * 2: Defect found with Component/Service
     *  * 3: Documentation Error
     *  * 4: Sollution found in forums
     *  * 5: Solution found in public Documentation
     *  * 6: Solution no longer required
     *  * 7: Solution provided by IBM outside of support case
     *  * 8: Solution provided by IBM support engineer.
     */
    resolutionCode?: number;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateCaseStatus` operation. */
  export namespace UpdateCaseStatusConstants {
    /** the action to perform on the case. */
    export enum Action {
      RESOLVE = 'resolve',
      UNRESOLVE = 'unresolve',
      ACCEPT = 'accept',
    }
  }

  /** Parameters for the `addComment` operation. */
  export interface AddCommentParams {
    /** Unique identifier of a case. */
    caseNumber: string;
    /** the comment to be added to the case. */
    comment: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `addWatchlist` operation. */
  export interface AddWatchlistParams {
    /** Unique identifier of a case. */
    caseNumber: string;
    /** List of users to be added or removed from the watchlist of a case. */
    watchlist?: UserIdAndRealm[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `removeWatchlist` operation. */
  export interface RemoveWatchlistParams {
    /** Unique identifier of a case. */
    caseNumber: string;
    /** List of users to be added or removed from the watchlist of a case. */
    watchlist?: UserIdAndRealm[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `addResource` operation. */
  export interface AddResourceParams {
    /** Unique identifier of a case. */
    caseNumber: string;
    /** Cloud Resource Name of the resource. */
    crn?: string;
    /** Name of the resource. */
    name?: string;
    /** Only used to attach Classic IaaS devices which have no CRN. */
    type?: string;
    /** Only used to attach Classic IaaS devices which have no CRN. Id of Classic IaaS device. */
    id?: number;
    /** A note about this resource. */
    note?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `uploadFile` operation. */
  export interface UploadFileParams {
    /** Unique identifier of a case. */
    caseNumber: string;
    /** file of supported types, 8MB in size limit. */
    file: NodeJS.ReadableStream|Buffer;
    /** The content type of file. */
    fileContentType?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `downloadFile` operation. */
  export interface DownloadFileParams {
    /** Unique identifier of a case. */
    caseNumber: string;
    /** Unique identifier of a file. */
    fileId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteFile` operation. */
  export interface DeleteFileParams {
    /** Unique identifier of a case. */
    caseNumber: string;
    /** Unique identifier of a file. */
    fileId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getEuSupport` operation. */
  export interface GetEuSupportParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getTechnicalOfferings` operation. */
  export interface GetTechnicalOfferingsParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getResolutionCodes` operation. */
  export interface GetResolutionCodesParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getStatuses` operation. */
  export interface GetStatusesParams {
    headers?: OutgoingHttpHeaders;
  }

  /*************************
   * model interfaces
   ************************/

  /** the offering type. */
  export interface OfferingItemType {
    /** the offering type's group. */
    group?: string;
    /** the offering type's key value. */
    key?: string;
  }

  /** Resource offering type. */
  export interface OfferingPayloadType {
    /** the offering type's group. */
    group?: string;
    /** the offering type's key. */
    key?: string;
    /** the offering type's identifier. */
    id?: string;
    /** the offering type's kind. */
    kind?: string;
  }

  /** the response returned by the `add_watchlist` operation. */
  export interface AddWatchlistResults {
    /** List of successfully added user IDs. */
    added?: User[];
    /** List of failed-to-add user IDs. */
    failed?: User[];
  }

  /** Details of an attachment. */
  export interface Attachment {
    /** Unique identifier of the attachment in database. */
    id?: string;
    /** Name of the attachment. */
    filename?: string;
    /** Size of the attachment in bytes. */
    size_in_bytes?: number;
    /** Date time of uploading. */
    created_at?: string;
    /** URL of the attachment used to download. */
    url?: string;
  }

  /** a case object. */
  export interface Case {
    /** Number/ID of the case. */
    number?: string;
    /** A short description of what the case is about. */
    short_escription?: string;
    /** A full description of what the case is about. */
    description?: string;
    /** Date time of case creation in UTC. */
    created_at?: string;
    /** Case creator. */
    created_by?: User;
    /** Date time of the last update on the case in UTC. */
    updated_at?: string;
    /** Person who makes the most recent update to the case. */
    updated_by?: User;
    /** Name of the console to interact with the contact. */
    contact_type?: string;
    /** Person who reported the case. */
    contact?: User;
    /** Status of the case. */
    status?: string;
    /** The severity of the case. */
    severity?: number;
    /** Support tier of the account. */
    support_tier?: string;
    /** Standard reasons of resolving case. */
    resolution?: string;
    /** Notes of case closing. */
    close_notes?: string;
    /** Specifies if the case should be treated as EU regulated. */
    eu?: Eu;
    /** User IDs in the watchlist. */
    watchlist?: User[];
    /** List of attachments/files of the case. */
    attachments?: Attachment[];
    /** A catalog offering associated with a case. */
    offering?: Offering;
    /** List of attached resources. */
    resources?: Resource[];
    /** List of comments/updates sorted in chronological order. */
    comments?: Comment[];
  }

  /** a collection of cases returned by the `get_cases` operation. */
  export interface CaseCollection {
    /** Total number of cases satisfying the query. */
    total_count?: number;
    /** the first page of the case collection. */
    first?: PaginationLink;
    /** the next page of the case collection. */
    next?: PaginationLink;
    /** the previous page of the case collection. */
    previous?: PaginationLink;
    /** the last page of the case collection. */
    last?: PaginationLink;
    /** the cases returned in the collection. */
    cases?: Case[];
  }

  /** A comment or update associated with a case. */
  export interface Comment {
    /** The comment. */
    value?: string;
    /** Timestamp of when comment is added. */
    added_at?: string;
    /** The person who added the comment. */
    added_by?: User;
  }

  /** The response returned by the `delete_file` operation. */
  export interface DeleteFileResponse {
    /** List of attachments/files of the case. */
    attachments?: Attachment[];
  }

  /** Specifies if the case should be treated as EU regulated. */
  export interface Eu {
    /** Identifying whether the case has EU Support. */
    support?: boolean;
    /** Information about the data center. */
    data_center?: string;
  }

  /** Specify if the case should be treated as EU regulated. Only one of the following properties is required. Call EU support utility endpoint to determine which property must be specified for your account. */
  export interface EuPayload {
    /** indicates whether the case should be treated as EU regulated. */
    supported?: boolean;
    /** If EU supported utility endpoint specifies datacenter then pass the datacenter id to mark a case as EU
     *  supported.
     */
    data_center?: number;
  }

  /** information needed to treat a case as EU regulated. */
  export interface EuSupport {
    /** Property which must be specified on eu property of case creation payload. */
    property?: string;
    /** If the value of property is 'datacenter' then select datacenter by passing its id in `eu.datacenter` field
     *  of case creation payload.
     */
    values?: any[];
  }

  /** A catalog offering associated with a case. */
  export interface Offering {
    /** id of the catalog offering. */
    id?: string;
    /** display name of the catalog offering. */
    value?: string;
  }

  /** an individual offering. */
  export interface OfferingItem {
    /** the name of the offering. */
    name?: string;
    /** the offering type. */
    type?: OfferingItemType;
  }

  /** The offering of a case to be created. */
  export interface OfferingPayload {
    /** Resource offering name. */
    name: string;
    /** Resource offering type. */
    type: OfferingPayloadType;
  }

  /** a reference to a page of results within a case collection. */
  export interface PaginationLink {
    /** the page reference as a URI. */
    href?: string;
  }

  /** a resolution code. */
  export interface ResolutionCode {
    /** the resolution code identifier. */
    id?: number;
    /** the resolution code value. */
    value?: string;
  }

  /** the resolution codes returned by the `get_resolution_codes` operation. */
  export interface ResolutionCodesResponse {
    /** the set of supported resolution codes. */
    resolution_codes?: ResolutionCode[];
  }

  /** a resource associated with a case. */
  export interface Resource {
    /** Cloud Resource Name of the resource. */
    crn?: string;
    /** Name of the resource. */
    name?: string;
    /** Only used to attach Classic IaaS devices which have no CRN. */
    type?: string;
    /** Only used to attach Classic IaaS devices which have no CRN. Id of Classic IaaS device. */
    id?: number;
    /** A note about this resource. */
    note?: string;
  }

  /** A status value used in case filtering. */
  export interface Status {
    /** the status identifier. */
    id?: string;
    /** the status description. */
    description?: string;
  }

  /** a collection of status values used in case filtering. */
  export interface StatusesResponse {
    /** the list of status values used incase filtering. */
    statuses?: Status[];
  }

  /** the response for the `get_technical_offerings` operation. */
  export interface TechnicalOfferingsResponse {
    /** a list of offerings. */
    offerings?: OfferingItem[];
  }

  /** information related to a user. */
  export interface User {
    /** Full name of the user. */
    name?: string;
    /** the ID realm. */
    realm?: string;
    /** unique user ID in the realm specified by the type. */
    user_id?: string;
  }

  /** information related to a user. */
  export interface UserIdAndRealm {
    /** the ID realm. */
    realm: string;
    /** unique user ID in the realm specified by the type. */
    user_id: string;
  }

}

export = CaseManagementV1;
